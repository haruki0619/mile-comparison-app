'use client';

import { useState, useEffect } from 'react';
import { SearchResult, AirlineMileInfo } from '../types';
import { getAirport, calculateBookingStartDate, calculateMileValue } from '../utils/mileCalculator';
import { 
  Plane, 
  Calendar, 
  CreditCard, 
  Award, 
  ExternalLink, 
  Info, 
  TrendingDown,
  AlertCircle,
  Calculator
} from 'lucide-react';
import MilePatternComparison from './MilePatternComparison';
import MileEfficiencyCalculator from './MileEfficiencyCalculator';
import MileUpdateAlert from './MileUpdateAlert';
import DynamicMileComparison from './DynamicMileComparison';

interface SearchResultsProps {
  result: SearchResult;
  onCreateAlert?: (offer: any) => void;
  onViewCalendar?: (searchDate?: string) => void;
}

export default function SearchResults({ result, onCreateAlert, onViewCalendar }: SearchResultsProps) {
  console.log('🎯 SearchResults component rendered with:', result);
  
  const [selectedAirline, setSelectedAirline] = useState<string | null>(null);
  const [showPatternComparison, setShowPatternComparison] = useState(true);
  const [showEfficiencyCalculator, setShowEfficiencyCalculator] = useState(false);
  const [showUpdateAlert, setShowUpdateAlert] = useState(true);
  const [showDynamicComparison, setShowDynamicComparison] = useState(false);
  
  useEffect(() => {
    console.log('🎯 SearchResults useEffect - result changed:', result);
  }, [result]);
  
  const departureAirport = getAirport(result.route.departure);
  const arrivalAirport = getAirport(result.route.arrival);

  console.log('🎯 Airport data:', { departureAirport, arrivalAirport });

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ja-JP', {
      style: 'currency',
      currency: 'JPY',
    }).format(amount);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      weekday: 'short',
    });
  };

  const getSeasonLabel = (season: string) => {
    switch (season) {
      case 'peak': return 'ピーク';
      case 'off': return 'オフピーク';
      default: return 'レギュラー';
    }
  };

  const getSeasonColor = (season: string) => {
    switch (season) {
      case 'peak': return 'text-red-600 bg-red-50';
      case 'off': return 'text-green-600 bg-green-50';
      default: return 'text-blue-600 bg-blue-50';
    }
  };

  const getAirlineColor = (airline: string) => {
    switch (airline) {
      case 'ANA': return 'border-blue-200 bg-blue-50';
      case 'JAL': return 'border-red-200 bg-red-50';
      case 'SOLASEED': return 'border-green-200 bg-green-50';
      default: return 'border-gray-200 bg-gray-50';
    }
  };

  const currentMiles = (airlineInfo: AirlineMileInfo) => {
    return airlineInfo.miles[result.season];
  };

  return (
    <div className="space-y-8">
      {/* 検索結果ヘッダー */}
      <div className="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden">
        {/* Main Header */}
        <div className="bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-4">
          <h2 className="text-xl font-bold text-white flex items-center gap-3">
            <Plane className="w-6 h-6" />
            検索結果
          </h2>
          <div className="flex items-center gap-4 text-blue-100 text-sm mt-2">
            <div className="font-medium">
              {departureAirport?.city} ({result.route.departure})
            </div>
            <div className="text-blue-200">→</div>
            <div className="font-medium">
              {arrivalAirport?.city} ({result.route.arrival})
            </div>
            <div className="text-blue-200">|</div>
            <div>{formatDate(result.date)}</div>
            <div className="text-blue-200">|</div>
            <div>{result.route.distance}km</div>
          </div>
        </div>

        {/* Action Toolbar */}
        <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <span className={`px-3 py-1.5 rounded-full text-sm font-medium ${getSeasonColor(result.season)}`}>
                {getSeasonLabel(result.season)}シーズン
              </span>
              <span className="text-sm text-gray-600">
                {result.airlines.length}社比較結果
              </span>
            </div>
            
            {/* Simplified Action Buttons */}
            <div className="flex items-center gap-2">
              <div className="hidden md:flex items-center gap-2">
                <button
                  onClick={() => setShowPatternComparison(!showPatternComparison)}
                  className={`px-4 py-2 rounded-lg transition-all flex items-center gap-2 text-sm font-medium ${
                    showPatternComparison 
                      ? 'bg-orange-500 hover:bg-orange-600 text-white shadow-md' 
                      : 'bg-white hover:bg-gray-50 text-gray-700 border border-gray-300'
                  }`}
                >
                  <Award className="w-4 h-4" />
                  パターン比較
                </button>
                
                <button
                  onClick={() => setShowDynamicComparison(!showDynamicComparison)}
                  className={`px-4 py-2 rounded-lg transition-all flex items-center gap-2 text-sm font-medium ${
                    showDynamicComparison 
                      ? 'bg-blue-500 hover:bg-blue-600 text-white shadow-md' 
                      : 'bg-white hover:bg-gray-50 text-gray-700 border border-gray-300'
                  }`}
                >
                  <TrendingDown className="w-4 h-4" />
                  詳細分析
                </button>
              </div>

              {onViewCalendar && (
                <button
                  onClick={() => onViewCalendar(result.date)}
                  className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition-all flex items-center gap-2 text-sm font-medium shadow-md"
                >
                  <Calendar className="w-4 h-4" />
                  カレンダー
                </button>
              )}

              {/* Mobile Dropdown Menu */}
              <div className="md:hidden">
                <button
                  onClick={() => setShowEfficiencyCalculator(!showEfficiencyCalculator)}
                  className="bg-white hover:bg-gray-50 text-gray-700 px-3 py-2 rounded-lg border border-gray-300 transition-all"
                >
                  ⋯
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
                カレンダー表示
              </button>
            )}
            <span className={`px-3 py-1 rounded-full text-sm font-medium ${getSeasonColor(result.season)}`}>
              {getSeasonLabel(result.season)}シーズン
            </span>
          </div>
        </div>
        
        <div className="flex items-center gap-4 text-lg">
          <div className="font-semibold">
            {departureAirport?.city} ({result.route.departure})
          </div>
          <div className="text-gray-700">→</div>
          <div className="font-semibold">
            {arrivalAirport?.city} ({result.route.arrival})
          </div>
          <div className="text-gray-700 text-sm">
            | {formatDate(result.date)} | {result.route.distance}km
          </div>
        </div>
      </div>

      {/* 航空会社比較カード */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {result.airlines.map((airlineInfo) => {
          const bookingStartDate = calculateBookingStartDate(result.date, airlineInfo.bookingStartDays);
          const mileValue = calculateMileValue(currentMiles(airlineInfo), airlineInfo.cashPrice || 0);
          
          return (
            <div
              key={airlineInfo.airline}
              className={`bg-white rounded-xl shadow-lg border-2 ${getAirlineColor(airlineInfo.airline)} transition-all hover:shadow-xl`}
            >
              <div className="p-6">
                {/* 航空会社名 */}
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-xl font-bold text-gray-800">
                    {airlineInfo.airline}
                  </h3>
                  {airlineInfo.discount && (
                    <span className="px-2 py-1 bg-red-100 text-red-700 text-xs rounded-full flex items-center gap-1">
                      <TrendingDown className="w-3 h-3" />
                      特価
                    </span>
                  )}
                </div>

                {/* マイル情報 */}
                <div className="space-y-3 mb-4">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-800 flex items-center gap-1">
                      <Award className="w-4 h-4" />
                      必要マイル
                    </span>
                    <div className="text-right">
                      {airlineInfo.discount ? (
                        <div>
                          <span className="text-sm text-gray-700 line-through">
                            {currentMiles(airlineInfo).toLocaleString()}
                          </span>
                          <div className="text-lg font-bold text-red-600">
                            {airlineInfo.discount.discountedMiles.toLocaleString()}
                          </div>
                        </div>
                      ) : (
                        <span className="text-lg font-bold text-gray-800">
                          {currentMiles(airlineInfo).toLocaleString()}
                        </span>
                      )}
                    </div>
                  </div>

                  {airlineInfo.cashPrice && (
                    <div className="flex items-center justify-between">
                      <span className="text-gray-800 flex items-center gap-1">
                        <CreditCard className="w-4 h-4" />
                        現金価格
                      </span>
                      <span className="font-semibold">
                        {formatCurrency(airlineInfo.cashPrice)}
                      </span>
                    </div>
                  )}

                  {mileValue > 0 && (
                    <div className="flex items-center justify-between">
                      <span className="text-gray-800 text-sm">
                        1マイル価値
                      </span>
                      <span className="text-sm font-medium text-green-600">
                        {mileValue.toFixed(2)}円
                      </span>
                    </div>
                  )}
                </div>

                {/* 予約開始日 */}
                <div className="bg-gray-50 p-3 rounded-lg mb-4">
                  <div className="flex items-center gap-2 text-sm text-gray-800 mb-1">
                    <Calendar className="w-4 h-4" />
                    予約開始日
                  </div>
                  <div className="font-medium">
                    {formatDate(bookingStartDate)}
                  </div>
                  <div className="text-xs text-gray-700">
                    ({airlineInfo.bookingStartDays}日前より)
                  </div>
                </div>

                {/* ディスカウント情報 */}
                {airlineInfo.discount && (
                  <div className="bg-red-50 border border-red-200 p-3 rounded-lg mb-4">
                    <div className="flex items-center gap-2 text-sm text-red-700 mb-1">
                      <TrendingDown className="w-4 h-4" />
                      特別キャンペーン
                    </div>
                    <div className="text-xs text-red-600">
                      {airlineInfo.discount.validUntil}まで有効
                    </div>
                  </div>
                )}

                {/* アクションボタン */}
                <div className="space-y-2">
                  <button
                    onClick={() => setSelectedAirline(
                      selectedAirline === airlineInfo.airline ? null : airlineInfo.airline
                    )}
                    className="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 py-2 px-4 rounded-lg transition-colors flex items-center justify-center gap-2"
                  >
                    <Info className="w-4 h-4" />
                    詳細情報
                  </button>

                  {/* アラート作成ボタン */}
                  {onCreateAlert && (
                    <button
                      onClick={() => onCreateAlert({
                        airline: airlineInfo.airline,
                        route: result.route,
                        date: result.date,
                        price: airlineInfo.cashPrice,
                        miles: airlineInfo.miles[result.season]
                      })}
                      className="w-full bg-orange-600 hover:bg-orange-700 text-white py-2 px-4 rounded-lg transition-colors flex items-center justify-center gap-2"
                    >
                      <AlertCircle className="w-4 h-4" />
                      価格アラート設定
                    </button>
                  )}
                  
                  <a
                    href={`https://www.${airlineInfo.airline.toLowerCase()}.co.jp`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors flex items-center justify-center gap-2"
                  >
                    <ExternalLink className="w-4 h-4" />
                    公式サイトで予約
                  </a>
                </div>
              </div>

              {/* 詳細情報の展開部分 */}
              {selectedAirline === airlineInfo.airline && (
                <div className="border-t border-gray-200 p-6 bg-gray-50">
                  <h4 className="font-semibold mb-3">シーズン別マイル要件</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>レギュラー:</span>
                      <span>{airlineInfo.miles.regular.toLocaleString()}マイル</span>
                    </div>
                    <div className="flex justify-between">
                      <span>ピーク:</span>
                      <span>{airlineInfo.miles.peak.toLocaleString()}マイル</span>
                    </div>
                    <div className="flex justify-between">
                      <span>オフピーク:</span>
                      <span>{airlineInfo.miles.off.toLocaleString()}マイル</span>
                    </div>
                  </div>
                  
                  <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <div className="flex items-center gap-2 text-yellow-700 text-sm">
                      <AlertCircle className="w-4 h-4" />
                      <span className="font-medium">ご注意</span>
                    </div>
                    <ul className="text-xs text-yellow-600 mt-1 space-y-1">
                      <li>• 特典航空券の空席状況により予約できない場合があります</li>
                      <li>• マイルの有効期限にご注意ください</li>
                      <li>• 現金価格は概算値です</li>
                    </ul>
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* マイル表更新情報 */}
      {showUpdateAlert && (
        <MileUpdateAlert 
          onUpdateSubscribe={(airline) => {
            console.log('Subscribed to updates for:', airline);
            // 更新通知の設定処理をここに追加
          }}
        />
      )}

      {/* 動的マイル比較 */}
      {showDynamicComparison && (
        <DynamicMileComparison 
          onBestOptionFound={(option) => {
            console.log('Best option found:', option);
            // 最適オプション発見時の処理をここに追加
          }}
        />
      )}

      {/* パターン比較 */}
      {showPatternComparison && result.airlines.length > 0 && (
        <MilePatternComparison 
          result={result}
          onSelectPattern={(pattern) => {
            console.log('Selected pattern:', pattern);
            // パターン選択時の処理をここに追加
          }}
        />
      )}

      {/* 効率計算機 */}
      {showEfficiencyCalculator && (
        <MileEfficiencyCalculator 
          onCalculationChange={(result) => {
            console.log('Efficiency calculation:', result);
            // 計算結果を活用した処理をここに追加
          }}
        />
      )}

      {/* 比較サマリー */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-lg font-bold text-gray-800 mb-4">比較サマリー</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-green-50 border border-green-200 p-4 rounded-lg">
            <div className="text-green-700 font-medium mb-1">最少マイル</div>
            <div className="text-xl font-bold text-green-800">
              {Math.min(...result.airlines.map(a => 
                a.discount ? a.discount.discountedMiles : currentMiles(a)
              )).toLocaleString()}
            </div>
            <div className="text-sm text-green-600">
              {result.airlines.find(a => 
                (a.discount ? a.discount.discountedMiles : currentMiles(a)) === 
                Math.min(...result.airlines.map(b => 
                  b.discount ? b.discount.discountedMiles : currentMiles(b)
                ))
              )?.airline}
            </div>
          </div>

          <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg">
            <div className="text-blue-700 font-medium mb-1">最安現金価格</div>
            <div className="text-xl font-bold text-blue-800">
              {formatCurrency(Math.min(...result.airlines.map(a => a.cashPrice || Infinity)))}
            </div>
            <div className="text-sm text-blue-600">
              {result.airlines.find(a => 
                a.cashPrice === Math.min(...result.airlines.map(b => b.cashPrice || Infinity))
              )?.airline}
            </div>
          </div>

          <div className="bg-purple-50 border border-purple-200 p-4 rounded-lg">
            <div className="text-purple-700 font-medium mb-1">最高マイル価値</div>
            <div className="text-xl font-bold text-purple-800">
              {Math.max(...result.airlines.map(a => 
                calculateMileValue(currentMiles(a), a.cashPrice || 0)
              )).toFixed(2)}円
            </div>
            <div className="text-sm text-purple-600">
              {result.airlines.find(a => 
                calculateMileValue(currentMiles(a), a.cashPrice || 0) === 
                Math.max(...result.airlines.map(b => 
                  calculateMileValue(currentMiles(b), b.cashPrice || 0)
                ))
              )?.airline}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
